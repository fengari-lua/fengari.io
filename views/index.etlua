<div class="content">

    <section class="header">
        <div class="section__content">
            <img src="/static/images/logo.png" alt="Fengari" class="logo">
            <h1>Fengari</h1>
            <h3>üê∫ œÜŒµŒ≥Œ≥Œ¨œÅŒπ - Lua for the Browser</h3>
            <a href="https://github.com/fengari-lua/fengari">
                <img src="/static/images/github-icon.svg" alt="Github" width="32">
            </a>
        </div>
    </section>

    <section>
        <div class="section__content">
            <h2>What is it ?</h2>

            <p>
                Fengari is the Lua VM written in JavaScript.
                It uses JavaScript's garbage collector so that interoperability with the DOM is non-leaky.
            </p>

            <p>
                It comes with a <a href="https://github.com/fengari-lua/fengari-interop">simple module</a>,
                that renders any interaction with JavaScript and the DOM transparent:
            </p>

            <div class="center">
                <div class="snippet">
                    <code class="snippet__code lua hljs">
<pre>js = <span class="hljs-built_in">require</span> <span class="hljs-string">"js"</span>
window = js.global

window:alert(<span class="hljs-string">"Hello from Fengari!"</span>)</pre>
                    </code>
                    <div class="snippet__output"></div>
                    <div class="snippet__actions">
                        Try it:
                        <div class="snippet__actions__action" data-action="run">
                            ‚ñ∂
                            <div class="snippet__source" data-lang="lua">
                                js.global:alert("Hello from Fengari!")
                            </div>
                        </div>
                    </div>
                </div>

                <div class="snippet">
<code class="snippet__code lua hljs">
                        <pre>js = <span class="hljs-built_in">require</span> <span class="hljs-string">"js"</span>
window = js.global
document = window.document

<span class="hljs-built_in">print</span>(<span class="hljs-string">"This document's title is: "</span> .. document.title)</pre>
                    </code>
                    <div class="snippet__output"></div>
                    <div class="snippet__actions">
                        Try it:
                        <div class="snippet__actions__action" data-action="run">
                            ‚ñ∂
                            <div class="snippet__source" data-lang="lua">
                                window = js.global
                                document = window.document

                                print("This document's title is: " .. document.title)
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <p>
                Lua in the browser means you can use coroutines to write beautiful asynchronous code:
            </p>

            <div class="center">
                <div class="snippet">
                    <code class="snippet__code lua hljs">
                        <pre><span class="hljs-keyword">local</span> js = <span class="hljs-built_in">require</span> <span class="hljs-string">"js"</span>
<span class="hljs-keyword">local</span> window = js.global

<span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span><span class="hljs-params">(delay)</span></span>
    <span class="hljs-keyword">local</span> co = <span class="hljs-built_in">assert</span>(<span class="hljs-built_in">coroutine</span>.running(), <span class="hljs-string">"Should be run in a coroutine"</span>)

    window:setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>
        <span class="hljs-built_in">assert</span>(<span class="hljs-built_in">coroutine</span>.resume(co))
    <span class="hljs-keyword">end</span>, delay*1000)

    <span class="hljs-built_in">coroutine</span>.yield(co)
<span class="hljs-keyword">end</span>

<span class="hljs-built_in">coroutine</span>.wrap(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>
    <span class="hljs-built_in">print</span> <span class="hljs-string">"Going to sleep now..."</span>

    sleep(<span class="hljs-number">3</span>)

    <span class="hljs-built_in">print</span> <span class="hljs-string">"Sleep well ?"</span>
<span class="hljs-keyword">end</span>)()</pre>
                        </code>
                    <div class="snippet__output"></div>
                    <div class="snippet__actions">
                        Try it:
                        <div class="snippet__actions__action" data-action="run">
                            ‚ñ∂
                            <div class="snippet__source" data-lang="lua">
                                local js = require "js"
                                local window = js.global

                                local function sleep(delay)
                                    local co = assert(coroutine.running(), "Should be run in a coroutine")

                                    window:setTimeout(function()
                                        assert(coroutine.resume(co))
                                    end, delay*1000)

                                    coroutine.yield(co)
                                end

                                local snippetPrint = _G.print

                                coroutine.wrap(function()
                                    snippetPrint "Going to sleep now..."

                                    sleep(3)

                                    snippetPrint "Sleep well ?"
                                end)()
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section>
        <div class="section__content">
            <h2>Test it out !</h2>
            <div class="repl">
                <code id="fengari-console"></code>
                <div class="fengari-input-container">
                    <label id="fengari-prompt" for="fengari-input">‚Üí </label>
                    <textarea class="lua" id="fengari-input" rows="1" placeholder="Type some Lua here..."></textarea>
                </div>
            </div>

            This REPL is itself <a href="https://github.com/fengari-lua/fengari.io/blob/master/static/lua/web-cli.lua">written in Lua</a>.
        </div>
    </section>

    <section>
        <div class="section__content">
            <h2>Getting started</h2>

            <p>
                The easiest way to get started with Fengari in the browser is to use <a href="https://github.com/fengari-lua/fengari-web">fengari-web</a>.
                This module will watch the DOM for any <span class="quoted">&lt;script type=&quot;application/lua&quot; src=&quot;...&quot; async&gt;</span> and run them with Fengari.
            </p>

            <p>
                <ol>
                    <li>
                        <p>Build fengari-web:</p>
                        <div class="snippet snippet--noaction">
                            <code class="snippet__code bash hljs">
                                <pre>git <span class="hljs-built_in">clone</span> https://github.com/fengari-lua/fengari-web.git
npm install
npm run build</pre>
                            </code>
                        </div>
                    </li>

                    <li>
                        <p>Include it in your webpage:</p>
                        <div class="snippet snippet--noaction">
                            <code class="snippet__code html hljs xml">
                                <pre><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"dist/fengari-web.js"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre>
                            </code>
                        </div>
                    </li>

                    <li>
                        <p>Now any script of type <span class="quoted">application/lua</span> will be run by fengari:</p>
                        <div class="snippet snippet--noaction">
                            <code class="snippet__code html hljs xml">
                                <pre><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"application/lua"</span>&gt;</span><span class="javascript">
    print(<span class="hljs-string">"hello world !"</span>)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/my-script.lua"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"application/lua"</span> <span class="hljs-attr">async</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre>
                            </code>
                        </div>
                    </li>
                </ol>
            </p>
        </div>
    </section>

    <section>
        <div class="section__content">
            <h2>Structure</h2>

            <p>
                Fengari is spread across several repositories:
                <ul>
                    <li><a href="https://github.com/fengari-lua/fengari">fengari</a>: the core, largely a port of the PUC-Rio C implementation of Lua</li>
                    <li><a href="https://github.com/fengari-lua/fengari-web">fengari-web</a>: to use Fengari in the browser as easily as you might use JavaScript</li>
                    <li><a href="https://github.com/fengari-lua/fengari-interop">fengari-interop</a>: a lua library that makes interoperating with JavaScript objects simple, it is already included in fengari-web</li>
                    <li><a href="https://github.com/fengari-lua/fengari-node-cli">fengari-node-cli</a>: Lua CLI but running on top of Node.js</li>
                </ul>
            </p>
        </div>
    </section>

    <section class="footer">
        <div class="section__content">
            <h2>References</h2>
            <p>
                <ul>
                    <li>Github: <a href="https://github.com/fengari-lua">fengari-lua</a></li>
                    <li><a href="https://hackernoon.com/why-we-rewrote-lua-in-js-a66529a8278d">Why we rewrote Lua in JS</a></li>
                    <li>Daurnimator's talk at Lua Workshop 2017: <a href="https://www.youtube.com/watch?v=xrLIgmd8xik">video</a>, <a href="https://www.lua.org/wshop17/fengari.html">slides</a></li>
                </ul>
            </p>

            <h2>Contact/Help</h2>
            <p>
                <ul>
                    <li>Mail: <a href="mailto:team@fengari.io">team@fengari.io</a></li>
                    <li>Chat: <a href="ircs://chat.freenode.net:6697/fengari">#fengari on freenode</a> <a href="https://webchat.freenode.net/?channels=fengari">(Web Chat)</a> or <a href="https://matrix.to/#/#fengari:matrix.org">via Matrix</a></li>
                </ul>
            </p>
        </div>
    </section>

</div>

<script src="/static/js/fengari-web.js?v=1" type="text/javascript"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/highlight.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/languages/lua.min.js"></script>

<script src="/static/lua/web-cli.lua?v=1" type="application/lua" async></script>
<script src="/static/lua/snippets.lua?v=1" type="application/lua" async></script>
