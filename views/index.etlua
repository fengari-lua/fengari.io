<div class="content">

    <section class="header">
        <div class="section__content">
            <img src="/static/images/logo.png" alt="Fengari" class="logo">
            <h1>Fengari</h1>
            <h3>üê∫ œÜŒµŒ≥Œ≥Œ¨œÅŒπ - Lua for the Browser</h3>
            <a href="https://github.com/fengari-lua/fengari">
                <img src="/static/images/github-icon.svg" alt="Github" width="32" class="logo">
            </a>
        </div>
    </section>

    <section>
        <div class="section__content">
            <h2>What is it ?</h2>

            <p>
                Fengari is the Lua VM written in JavaScript.
                It uses JavaScript's garbage collector so that interoperability with the DOM is memory safe.
            </p>

            <p>
                It comes with a <a href="https://github.com/fengari-lua/fengari-interop">simple module</a>,
                that renders any interaction with JavaScript and the DOM transparent:
            </p>

            <div class="center">
                <div class="snippet">
                    <code class="snippet__code lua">
                        <pre>
js = require "js"
window = js.global

window:alert("Hello from Fengari !")
                        </pre>
                    </code>
                    <div class="snippet__output"></div>
                    <div class="snippet__actions">
                        Try it: 
                        <div class="snippet__actions__action" data-action="run">
                            ‚ñ∂
                            <div class="snippet__source" data-lang="lua">
                                js.global:alert("Hello from Fengari !")
                            </div>
                        </div>
                    </div>
                </div>

                <div class="snippet">
                    <code class="snippet__code lua">
                        <pre>
js = require "js"
window = js.global
document = window.document

print("This section's title is: " .. document.title)
                        </pre>
                    </code>
                    <div class="snippet__output"></div>
                    <div class="snippet__actions">
                        Try it: 
                        <div class="snippet__actions__action" data-action="run">
                            ‚ñ∂
                            <div class="snippet__source" data-lang="lua">
                                window = js.global
                                document = window.document

                                print("The page title is: " .. document.title)
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <p>
                Lua in the browser means you can use coroutines to write beautiful asynchronous code:
            </p>

            <div class="center">
                <div class="snippet">
                    <code class="snippet__code lua">
                        <pre>
coroutine.wrap(function()
    local data = fetch("/static/data/test.html")

    print("Received: ", data)
end)()
                        </pre>
                    </code>
                    <div class="snippet__output"></div>
                    <div class="snippet__actions">
                        Try it: 
                        <div class="snippet__actions__action" data-action="run">
                            ‚ñ∂
                            <div class="snippet__source" data-lang="lua">
                                local fetch = function(url)
                                    local co = coroutine.running()

                                    local promise = js.global:fetch(url)

                                    promise["then"](promise, function(_, res)
                                        local textPromise = res:text()
                                        textPromise["then"](textPromise, function(_, text)
                                            coroutine.resume(co, text)
                                        end)
                                    end)

                                    local res = coroutine.yield()

                                    return res
                                end

                                local snippetPrint = _G.print

                                local co = coroutine.wrap(function()
                                    local data = fetch("/static/data/test.html")

                                    snippetPrint("Received: ", data)
                                end)

                                co()
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section>
        <div class="section__content">
            <h2>Test it out !</h2>
            <div class="repl">
                <code id="fengari-console"></code>
                <div class="fengari-input-container">
                    <label id="fengari-prompt" for="fengari-input">‚Üí </label>
                    <textarea class="lua" id="fengari-input" rows="1" placeholder="Type some Lua here..."></textarea>
                </div>
            </div>

            This REPL is itself <a href="https://github.com/fengari-lua/fengari.io/blob/master/static/lua/web-cli.lua">written in Lua</a>.
        </div>
    </section>

    <section>
        <div class="section__content">
            <h2>Getting started</h2>

            <p>
                The easiest way to get started with Fengari in the browser is to use <a href="https://github.com/fengari-lua/fengari-web">fengari-web</a>.
                This module will watch the DOM for any <span class="quoted">&lt;script type=&quot;application/lua&quot; src=&quot;...&quot; async&gt;</span> and run them with Fengari.
            </p>

            <p>
                <ol>
                    <li>
                        <p>Build fengari-web:</p>
                        <div class="snippet snippet--noaction">
                            <code class="snippet__code bash">
                                <pre>
git clone https://github.com/fengari-lua/fengari-web.git
npm install
npm run build
                                </pre>
                            </code>
                        </div>
                    </li>

                    <li>
                        <p>Include it in your webpage:</p>
                        <div class="snippet snippet--noaction">
                            <code class="snippet__code html">
                                <pre>
&lt;script src="dist/fengari-web.js" type="text/javascript"&gt;&lt;/script&gt;
                                </pre>
                            </code>
                        </div>
                    </li>

                    <li>
                        <p>Now any script of type <span class="quoted">application/lua</span> will be run by fengari:</p>
                        <div class="snippet snippet--noaction">
                            <code class="snippet__code html">
                                <pre>
&lt;script type="application/lua"&gt;
    print("hello world !")
&lt;/script&gt;

&lt;script src="/my-script.lua" type="application/lua" async&gt;&lt;/script&gt;
                                </pre>
                            </code>
                        </div>
                    </li>
                </ol>
            </p>
        </div>
    </section>

    <section>
        <div class="section__content">
            <h2>Structure</h2>

            <p>
                Fengari is spread across several repositories:
                <ul>
                    <li><a href="https://github.com/fengari-lua/fengari">fengari</a>: the core, largely a port of the PUC-Rio C implementation of Lua</li>
                    <li><a href="https://github.com/fengari-lua/fengari-web">fengari-web</a>: to use Fengari in the browser as easily as you might use JavaScript</li>
                    <li><a href="https://github.com/fengari-lua/fengari-interop">fengari-interop</a>: a lua library that makes interoperating with JavaScript objects simple, it is already included in fengari-web</li>
                    <li><a href="https://github.com/fengari-lua/fengari-node-cli">fengari-node-cli</a>: Lua CLI but running on top of Node.js</li>
                </ul>
            </p>
        </div>
    </section>

    <section class="footer">
        <div class="section__content">
            <h2>References</h2>
            <p>
                <ul>
                    <li>Github: <a href="https://github.com/fengari-lua">fengari-lua</a></li>
                    <li><a href="https://hackernoon.com/why-we-rewrote-lua-in-js-a66529a8278d">Why we rewrote Lua in JS</a></li>
                    <li>Daurnimator's talk at Lua Workshop 2017: <a href="https://www.youtube.com/watch?v=xrLIgmd8xik">video</a>, <a href="https://www.lua.org/wshop17/fengari.html">slides</a></li>
                </ul>
            </p>

            <p>
                <div class="center">
                    <a href="mailto:team@fengari.io">team@fengari.io</a>
                </div>
            </p>
        </div>
    </section>

</div>

<script src="/static/js/fengari-web.js" type="text/javascript"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/highlight.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/languages/lua.min.js"></script>

<script src="/static/lua/web-cli.lua" type="application/lua" async></script>
<script src="/static/lua/snippets.lua" type="application/lua" async></script>
